---
interface Props {
  name: string;
  text: string;
  rating: number;
  image?: string;
}

const { name, text, rating, image = "https://via.placeholder.com/80" } = Astro.props;

// Generate stars based on rating
const stars = Array.from({ length: 5 }, (_, i) => i < rating);
---

<div class="testimonial">
  <div class="testimonial-content">
    <div class="stars">
      {stars.map(isFilled => (
        <span class={isFilled ? 'star filled' : 'star'}>â˜…</span>
      ))}
    </div>
    <p class="testimonial-text">{text}</p>
  </div>
  <div class="testimonial-author">
    <div class="testimonial-image">
      <img src={image} alt={`Foto de ${name}`} />
    </div>
    <div class="testimonial-name">{name}</div>
  </div>
</div>

<style>
  .testimonial {
    background-color: white;
    border-radius: 8px;
    padding: 1.5rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    display: flex;
    flex-direction: column;
  }
  
  .testimonial-content {
    margin-bottom: 1.5rem;
  }
  
  .stars {
    margin-bottom: 1rem;
    display: flex;
  }
  
  .star {
    color: #ddd;
    font-size: 1.2rem;
    margin-right: 0.2rem;
  }
  
  .star.filled {
    color: #FFD700;
  }
  
  .testimonial-text {
    font-style: italic;
    color: #555;
    line-height: 1.6;
  }
  
  .testimonial-author {
    display: flex;
    align-items: center;
    margin-top: auto;
  }
  
  .testimonial-image {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    overflow: hidden;
    margin-right: 1rem;
  }
  
  .testimonial-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .testimonial-name {
    font-weight: 600;
    color: var(--color-secondary);
  }
</style>
